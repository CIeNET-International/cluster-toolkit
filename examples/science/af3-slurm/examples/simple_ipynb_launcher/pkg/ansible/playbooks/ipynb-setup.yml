# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: af3-ipynb-setup
  hosts: localhost
  become: true
  vars:
    # variables set in af3-slurm-deployment.yaml
    project_id:
    slurm_rest_server_activate:
    service_user:
    af3ipynb_bucket:
    slurm_rest_token_secret_name:
    slurm_rest_api_port:
    sif_dir:
    model_dir:
    db_dir:
    pdb_database_path:
    jax_compilation_cache_path:
    af3ipynb_bucket_local_mount:
    inference_enable_unified_memory:

    # Default Datapipeline Partition Config
    default_datapipeline_partition_name:
    default_datapipeline_timeout:

    # Default Inference Partition Config
    default_inference_partition_name:
    default_inference_timeout:

    # Configuration info for each partition
    datapipeline_c3dhm_partition_name:
    datapipeline_c3dhm_partition_machine_type:
    datapipeline_c3dhm_partition_memory:
    datapipeline_c3dhm_partition_cpu_count:
    inference_g2_partition_name:
    inference_g2_partition_machine_type:
    inference_g2_partition_memory:
    inference_g2_partition_cpu_count:
    inference_a2_partition_name:
    inference_a2_partition_machine_type:
    inference_a2_partition_memory:
    inference_a2_partition_cpu_count:
    inference_a2u_partition_name:
    inference_a2u_partition_machine_type:
    inference_a2u_partition_memory:
    inference_a2u_partition_cpu_count:

    # AF3 Science Settings
    max_template_date:
    conformer_max_iterations:
    num_recycles:
    num_diffusion_samples:
    num_seeds:
    save_embeddings:

    # fixed variables, not intended to be modified
    af3_job_template_jupyter_path: "{{ af3ipynb_bucket_local_mount }}/libs/launch_af3_job.sh.j2"
    slurm_info_json_path: "{{ af3ipynb_bucket_local_mount }}/libs/slurm_info.json"
    slurm_node_working_directory: "/home/{{ service_user }}"

  tasks:
  - name: Upload files to AF3 Ipynb if bucket is defined and not empty
    when: af3ipynb_bucket is defined and af3ipynb_bucket | length > 0
    block:
    - name: Ensure google-cloud-storage Python package is installed
      ansible.builtin.pip:
        name: google-cloud-storage
        state: present
        extra_args: --upgrade
      delegate_to: localhost

    - name: Get public IP address from GCP metadata
      ansible.builtin.uri:
        url: http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip
        method: GET
        headers:
          Metadata-Flavor: Google
        return_content: yes
      register: gcp_metadata_response

    - name: Save public IP address to JSON file
      ansible.builtin.copy:
        dest: /tmp/slurm_info.json
        content: |
          {
            "hostname": "{{ gcp_metadata_response.content }}"
          }
        mode: "0644"

    - name: Upload slurm_info.json to GCS
      ansible.builtin.command:
        cmd: gcloud storage cp /tmp/slurm_info.json gs://{{ af3ipynb_bucket }}/libs/slurm_info.json
      register: upload_slurm_info
      ignore_errors: true

    - name: Upload rest_api_launch_af3_job.sh.j2 to GCS
      ansible.builtin.command:
        cmd: gcloud storage cp /tmp/rest_api_launch_af3_job.sh.j2 gs://{{ af3ipynb_bucket }}/libs/launch_af3_job.sh.j2
      register: upload_launch_script
      ignore_errors: true

    - name: Upload notebook-requirements.txt to GCS
      ansible.builtin.command:
        cmd: gcloud storage cp /tmp/notebook-requirements.txt gs://{{ af3ipynb_bucket }}/libs/notebook-requirements.txt
      register: upload_requirements
      ignore_errors: true

    - name: Upload visualization.py to GCS
      ansible.builtin.command:
        cmd: gcloud storage cp /tmp/visualization.py gs://{{ af3ipynb_bucket }}/libs/visualization.py
      register: upload_visualization
      ignore_errors: true

    - name: Render slurm_client.py from template locally
      ansible.builtin.template:
        src: /tmp/slurm_client.py.j2
        dest: /tmp/slurm_client.py

    - name: Upload slurm_client.py to GCS
      ansible.builtin.command:
        cmd: gcloud storage cp /tmp/slurm_client.py gs://{{ af3ipynb_bucket }}/libs/slurm_client.py
      register: upload_slurm_client
      ignore_errors: true

    - name: Render Jupyter Notebook locally
      ansible.builtin.template:
        src: /tmp/slurm-rest-api-notebook.ipynb.j2
        dest: /tmp/slurm-rest-api-notebook.ipynb

    - name: Upload slurm-rest-api-notebook.ipynb to GCS
      ansible.builtin.command:
        cmd: gcloud storage cp /tmp/slurm-rest-api-notebook.ipynb gs://{{ af3ipynb_bucket }}/slurm-rest-api-notebook.ipynb
      register: upload_notebook
      ignore_errors: true

    - name: Create empty __init__.py file
      ansible.builtin.file:
        path: /tmp/__init__.py
        state: touch
        mode: "0644"
        owner: root
        group: root

    - name: Upload empty __init__.py to GCS
      ansible.builtin.command:
        cmd: gcloud storage cp /tmp/__init__.py gs://{{ af3ipynb_bucket }}/libs/__init__.py
      register: upload_init
      ignore_errors: true

    # ==========================
    # Upload Failure Reporting
    # ==========================
    - name: Set fact for failed uploads
      set_fact:
        failed_uploads: >-
          {{
            [
              {'name': 'slurm_info.json', 'result': upload_slurm_info},
              {'name': 'launch_af3_job.sh.j2', 'result': upload_launch_script},
              {'name': 'notebook-requirements.txt', 'result': upload_requirements},
              {'name': 'visualization.py', 'result': upload_visualization},
              {'name': 'slurm_client.py', 'result': upload_slurm_client},
              {'name': 'slurm-rest-api-notebook.ipynb', 'result': upload_notebook},
              {'name': '__init__.py', 'result': upload_init}
            ] | selectattr('result.failed', 'defined') | selectattr('result.failed') | list
          }}

    - name: Print list of failed uploads
      ansible.builtin.debug:
        msg: >
          ❌ The following file uploads failed:
          {% for item in failed_uploads %}
            - {{ item.name }}
          {% endfor %}
      when: failed_uploads | length > 0

    - name: Fail the play if any uploads failed
      ansible.builtin.fail:
        msg: "❌ One or more file uploads to GCS failed."
      when: failed_uploads | length > 0
