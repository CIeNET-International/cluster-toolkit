# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Startup scripts to generate Slurm REST API server token
  hosts: localhost
  become: true

  vars:
    project_id: 
    jupyter_bucket_local_mount:
    secret_name:
    username:
    token_lifespan: 31536000
    
  tasks:
  - name: Create Slurm REST API token
    ansible.builtin.shell: |
      #!/bin/bash
      # Assign the username to a variable
      USERNAME="{{ username }}"
      # Assign 1 year lifespan to the token
      export $(scontrol token username="${USERNAME}" lifespan={{ token_lifespan }});
      # Query the metadata server to get the zone of the current VM
      ZONE=$(curl -s -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/zone")
      # Extract the zone name from the response
      ZONE_NAME=$(basename "${ZONE}")
      # Get the external IP address of the current VM instance
      EXTERNAL_IP=$(gcloud compute instances describe $(hostname) --zone="${ZONE_NAME}" --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
      GCP_SECRET_NAME="{{ secret_name }}"
      GCP_PROJECT_ID="{{ project_id }}"
      echo "Checking if GCP secret '$GCP_SECRET_NAME' exists..."
      gcloud secrets describe "$GCP_SECRET_NAME" >/dev/null 2>&1
      SECRET_EXISTS=$?
      if [[ $SECRET_EXISTS -ne 0 ]]; then
        echo "Secret does not exist. Creating it..."
        gcloud secrets create "$GCP_SECRET_NAME" --replication-policy="automatic"
      else
        echo "Secret already exists."
      fi
      echo "Saving token to Secret Manager..."
      echo -n "$SLURM_JWT" | gcloud secrets versions add "$GCP_SECRET_NAME" --data-file=-
      echo "Token saved successfully to Secret Manager as a new version."
      echo "Setting IAM policy for the secret..."
      gcloud secrets add-iam-policy-binding "$GCP_SECRET_NAME" \
        --member="serviceAccount:$(gcloud projects describe "$GCP_PROJECT_ID" --format='value(projectNumber)')-compute@developer.gserviceaccount.com" \
        --role="roles/secretmanager.secretAccessor" \
        --condition="expression=true,title=AlwaysTrue,description=Allow access to Secret Manager"
      echo "IAM policy set successfully."
      # Create a JSON object and write it to a file
      cat <<EOF > {{ jupyter_bucket_local_mount }}/slurm_info.json
      {
        "external_ip": "${EXTERNAL_IP}"
      }
      EOF
    args:
      executable: /bin/bash
    register: script_output
    failed_when: script_output.rc != 0
